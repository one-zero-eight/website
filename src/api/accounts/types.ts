/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/providers/innopolis/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Innopolis Login Or Register */
    get: operations["providers_innopolis_login_or_register"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/providers/innopolis/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Innopolis Callback */
    get: operations["providers_innopolis_callback"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/providers/telegram/connect": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Telegram Connect */
    post: operations["providers_telegram_connect"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/providers/telegram/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Telegram Login */
    post: operations["providers_telegram_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current user info if authenticated
     */
    get: operations["users_get_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/by-telegram-id/{telegram_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User By Telegram Id
     * @description Get user by telegram id
     */
    get: operations["users_get_user_by_telegram_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/by-id/{user_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User By Id
     * @description Get user by id
     */
    get: operations["users_get_user_by_id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/by-innomail/{email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User By Innomail
     * @description Get user by email
     */
    get: operations["users_get_user_by_innomail"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/.well-known/jwks.json": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Jwks
     * @description Get jwks for jwt
     */
    get: operations["tokens_get_jwks"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tokens/generate-my-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate My Token
     * @description Generate access token for current user with user id in `uid` field
     */
    get: operations["tokens_generate_my_token"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tokens/generate-access-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate Token
     * @description Generate access token with some sub in `sub` field
     */
    get: operations["tokens_generate_token"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tokens/generate-service-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate Service Token
     * @description Generate access token for access users-related endpoints (/users/*).
     */
    get: operations["tokens_generate_service_token"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tokens/generate-sport-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate Sport Token
     * @description Generate access token for access https://sport.innopolis.university/api/swagger/
     */
    get: operations["tokens_generate_sport_token"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tokens/generate-my-sport-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Generate My Sport Token
     * @description Generate access token for current user for access https://sport.innopolis.university/api/swagger/
     */
    get: operations["tokens_generate_my_sport_token"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Logout */
    get: operations["logout"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * AvailableScopes
     * @enum {string}
     */
    AvailableScopes: AvailableScopes;
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** TelegramLoginResponse */
    TelegramLoginResponse: {
      /** Need To Connect */
      need_to_connect: boolean;
    };
    /** TelegramWidgetData */
    TelegramWidgetData: {
      /** Hash */
      hash: string;
      /** Id */
      id: number;
      /** Auth Date */
      auth_date: number;
      /** First Name */
      first_name: string;
      /** Last Name */
      last_name?: string | null;
      /** Username */
      username?: string | null;
      /** Photo Url */
      photo_url?: string | null;
    };
    /** TokenData */
    TokenData: {
      /** Access Token */
      access_token: string;
    };
    /** User */
    User: {
      /**
       * Id
       * Format: objectid
       * @description MongoDB document ObjectID
       * @default None
       * @example 5eb7cf5a86d9755df3a6c593
       */
      id: string;
      innopolis_sso: components["schemas"]["UserInfoFromSSO"] | null;
      telegram: components["schemas"]["TelegramWidgetData"] | null;
      /**
       * Innohassle Admin
       * @default false
       */
      innohassle_admin: boolean;
    };
    /** UserInfoFromSSO */
    UserInfoFromSSO: {
      /** Email */
      email: string;
      /** Name */
      name?: string | null;
      /** Issued At */
      issued_at?: string | null;
      /**
       * Is Student
       * @default false
       */
      is_student: boolean;
      /**
       * Is Staff
       * @default false
       */
      is_staff: boolean;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaAvailableScopes = components["schemas"]["AvailableScopes"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaTelegramLoginResponse =
  components["schemas"]["TelegramLoginResponse"];
export type SchemaTelegramWidgetData =
  components["schemas"]["TelegramWidgetData"];
export type SchemaTokenData = components["schemas"]["TokenData"];
export type SchemaUser = components["schemas"]["User"];
export type SchemaUserInfoFromSso = components["schemas"]["UserInfoFromSSO"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type $defs = Record<string, never>;
export interface operations {
  providers_innopolis_login_or_register: {
    parameters: {
      query: {
        redirect_uri: string;
        prompt?: "none" | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  providers_innopolis_callback: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  providers_telegram_connect: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TelegramWidgetData"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Invalid Telegram widget hash */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  providers_telegram_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TelegramWidgetData"];
      };
    };
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TelegramLoginResponse"];
        };
      };
      /** @description Invalid Telegram widget hash */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_get_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_get_user_by_telegram_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        telegram_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description No credentials provided OR Not enough permissions (scopes) OR Could not validate credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object with such properties not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_get_user_by_id: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description No credentials provided OR Not enough permissions (scopes) OR Could not validate credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object with such properties not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_get_user_by_innomail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description No credentials provided OR Not enough permissions (scopes) OR Could not validate credentials */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object with such properties not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tokens_get_jwks: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  tokens_generate_my_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  tokens_generate_token: {
    parameters: {
      query: {
        sub: string;
        /** @description Space delimited list of scopes */
        scope?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tokens_generate_service_token: {
    parameters: {
      query: {
        /** @description Some string that will be in `sub` field of JWT token. Actually, it may be anything. */
        sub: string;
        /** @description List of scopes that will be in `scope` field of JWT token. Default is ['users'] */
        scopes?: components["schemas"]["AvailableScopes"][];
        /** @description Generate token only for current user - other users will be marked as not existing in the system */
        only_for_me?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tokens_generate_sport_token: {
    parameters: {
      query?: {
        telegram_id?: number | null;
        innohassle_id?: string | null;
        email?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description Not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object with such properties not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tokens_generate_my_sport_token: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TokenData"];
        };
      };
      /** @description User does not have a session cookie or `uid` in the session */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  logout: {
    parameters: {
      query: {
        redirect_uri: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Redirect to the specified URL */
      302: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid redirect_uri URL */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
export enum AvailableScopes {
  users = "users",
  sport = "sport",
}
