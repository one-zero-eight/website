/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/event-groups/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Event Groups
     * @description Get a list of all event groups
     */
    get: operations["event_groups_list_event_groups"];
    put?: never;
    /** Create Event Group */
    post: operations["event_groups_create_event_group"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/batch-create-or-read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Batch Create Event Groups */
    post: operations["event_groups_batch_create_event_groups"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/{event_group_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Event Group
     * @description Get event group info by id
     */
    get: operations["event_groups_get_event_group"];
    /** Update Event Group */
    put: operations["event_groups_update_event_group"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/by-path": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Find Event Group By Path
     * @description Get event group info by path
     */
    get: operations["event_groups_find_event_group_by_path"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/by-alias": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Find Event Group By Alias
     * @description Get event group info by alias
     */
    get: operations["event_groups_find_event_group_by_alias"];
    put?: never;
    post?: never;
    /**
     * Delete Event Group By Alias
     * @description Delete event group by alias
     */
    delete: operations["event_groups_delete_event_group_by_alias"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/by-tag-alias": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Event Group By Tag Alias
     * @description Delete event groups by its tag alias
     */
    delete: operations["event_groups_delete_event_group_by_tag_alias"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/event-groups/{event_group_id}/schedule.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * Set Event Group Ics
     * @description Load .ics file to event group by event group id and save file to predefined path
     */
    put: operations["event_groups_set_event_group_ics"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/all.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Current User Schedule
     * @description Get schedule in ICS format for the current user
     */
    get: operations["ics_get_current_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/all.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Schedule
     * @description Get schedule in ICS format for the user; requires access key for `/users/{user_id}/all.ics` resource
     */
    get: operations["ics_get_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/music-room.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Music Room Current User Schedule
     * @description Get schedule in ICS format for the current user
     */
    get: operations["ics_get_music_room_current_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/music-room.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Music Room User Schedule
     * @description Get schedule in ICS format for the user; requires access key for `/users/{user_id}/music-room.ics` resource
     */
    get: operations["ics_get_music_room_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/sport.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Sport Current User Schedule
     * @description Get schedule in ICS format for the current user
     */
    get: operations["ics_get_sport_current_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/sport.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Sport User Schedule
     * @description Get schedule in ICS format for the user; requires access key for `/users/{user_id}/sport.ics` resource
     */
    get: operations["ics_get_sport_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/moodle.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Moodle User Schedule
     * @description Get schedule in ICS format for the current user
     */
    get: operations["ics_get_moodle_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/moodle.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Moodle Current User Schedule
     * @description Get schedule in ICS format for the user; requires access key for `/users/{user_id}/moodle.ics` resource
     */
    get: operations["ics_get_moodle_current_user_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/linked/{linked_alias}.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Linked Schedule
     * @description Get schedule in ICS format for the user
     */
    get: operations["ics_get_user_linked_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/music-room.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Music Room Schedule
     * @description Get schedule in ICS format for the music room
     */
    get: operations["ics_get_music_room_schedule"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/{event_group_alias}.ics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Event Group Ics By Alias
     * @description Get event group .ics file by id
     */
    get: operations["ics_get_event_group_ics_by_alias"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/parse/cleaning": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Parse Cleaning Schedule */
    post: operations["parse_parse_cleaning_schedule"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/parse/bootcamp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Parse Bootcamp Schedule */
    post: operations["parse_parse_bootcamp_schedule"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/get-predefined-data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Predefined Data */
    get: operations["predefined_get_predefined_data"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/update-predefined-data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update Predefined Data */
    post: operations["predefined_update_predefined_data"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Tags
     * @description Get a list of all tags
     */
    get: operations["tags_list_tags"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/batch-create-or-read": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Batch Create Tags
     * @description Create tags in batch
     */
    post: operations["tags_batch_create_tags"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/by-alias": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Tag
     * @description Delete tag by alias
     */
    delete: operations["tags_delete_tag"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tags/by-type": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Tag By Type
     * @description Delete tag by type
     */
    delete: operations["tags_delete_tag_by_type"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current user info if authenticated
     */
    get: operations["users_get_me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/predefined": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Predefined
     * @description Get predefined event groups for user
     */
    get: operations["users_get_predefined"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/favorites": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Add Favorite
     * @description Add favorite to current user
     */
    post: operations["users_add_favorite"];
    /**
     * Delete Favorite
     * @description Delete favorite from current user
     */
    delete: operations["users_delete_favorite"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/favorites/hide": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Hide Favorite
     * @description Hide favorite from current user
     */
    post: operations["users_hide_favorite"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/{target}/hide": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Hide Target
     * @description Hide music room, sports or moodle from current user
     */
    post: operations["users_hide_target"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/linked": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Link Calendar
     * @description Add linked calendar to current user
     */
    post: operations["users_link_calendar"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/get-schedule-access-key": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Generate User Schedule Key
     * @description Generate an access key for the user schedule
     */
    post: operations["users_generate_user_schedule_key"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/schedule-access-keys": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get User Schedule Keys
     * @description Get all access keys for the user schedule
     */
    get: operations["users_get_user_schedule_keys"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/schedule-access-key": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete User Schedule Key
     * @description Delete an access key for the user schedule
     */
    delete: operations["users_delete_user_schedule_key"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/me/set-moodle": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Set User Moodle Data */
    post: operations["users_set_user_moodle_data"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/metrics": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Metrics
     * @description Endpoint that serves Prometheus metrics.
     */
    get: operations["metrics"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** AcademicGroup */
    AcademicGroup: {
      /** Name */
      name: string;
      /**
       * Ru
       * @default false
       */
      ru: boolean;
      math?: components["schemas"]["Entry"] | null;
      english?: components["schemas"]["Entry"] | null;
      labs?: components["schemas"]["Entry"] | null;
    };
    /** Body_event_groups_batch_create_event_groups */
    Body_event_groups_batch_create_event_groups: {
      /** Event Groups */
      event_groups: components["schemas"]["CreateEventGroup"][];
    };
    /** Body_event_groups_set_event_group_ics */
    Body_event_groups_set_event_group_ics: {
      /**
       * Ics File
       * Format: binary
       */
      ics_file: string;
    };
    /** Body_tags_batch_create_tags */
    Body_tags_batch_create_tags: {
      /** Tags */
      tags: components["schemas"]["CreateTag"][];
    };
    /** BootcampParserConfig */
    BootcampParserConfig: {
      /** When */
      when: string;
      /** General Events */
      general_events: components["schemas"]["Entry"][];
      /** Academic Groups */
      academic_groups: components["schemas"]["AcademicGroup"][];
      /** Buddy Groups */
      buddy_groups: components["schemas"]["BuddyGroup"][];
      /** Workshops */
      workshops: components["schemas"]["Workshop"][];
    };
    /** BuddyGroup */
    BuddyGroup: {
      /** Number */
      number: string;
      /** Name */
      name: string;
      /** Tg */
      tg: string;
    };
    /** CleaningEntry */
    CleaningEntry: {
      /**
       * Name
       * @default Cleaning
       */
      name: string;
      /** Location */
      location: string;
      /** Dates */
      dates: string[];
    };
    /** CleaningParserConfig */
    CleaningParserConfig: {
      /**
       * Start Date
       * Format: date
       */
      start_date: string;
      /** Cleaning Entries */
      cleaning_entries: components["schemas"]["CleaningEntry"][];
      /** Linen Change Entries */
      linen_change_entries: components["schemas"]["LinenChangeEntry"][];
    };
    /** CreateEventGroup */
    CreateEventGroup: {
      /** Alias */
      alias: string;
      /** Name */
      name: string;
      /** Path */
      path?: string | null;
      /** Description */
      description?: string | null;
      /** Tags */
      tags?: components["schemas"]["CreateTag"][];
    };
    /** CreateTag */
    CreateTag: {
      /** Alias */
      alias: string;
      /** Type */
      type?: string | null;
      /** Name */
      name?: string | null;
      /** Satellite */
      satellite?: string | null;
    };
    /** Entry */
    Entry: {
      /** Subject */
      subject?: string | null;
      /** Subject Ru */
      subject_ru?: string | null;
      /** Instructor */
      instructor?: string | null;
      /** Location */
      location?: string | null;
      /** Location Ru */
      location_ru?: string | null;
      /** When */
      when: string[];
      /**
       * Buddy
       * @default false
       */
      buddy: boolean;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** InJsonUser */
    InJsonUser: {
      /** Email */
      email: string;
      /** Groups */
      groups?: string[];
    };
    /** JsonPredefinedUsers */
    JsonPredefinedUsers: {
      /** Users */
      users?: components["schemas"]["InJsonUser"][];
    };
    /** LinenChangeEntry */
    LinenChangeEntry: {
      /**
       * Name
       * @default Linen change
       */
      name: string;
      /** Location */
      location: string;
      /** Rrule */
      rrule: {
        [key: string]: string;
      };
    };
    /**
     * LinkedCalendarCreate
     * @description Represents a linked calendar instance to be created.
     */
    LinkedCalendarCreate: {
      /** Alias */
      alias: string;
      /** Url */
      url: string;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Color */
      color?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
    };
    /**
     * LinkedCalendarView
     * @description Represents a linked calendar instance from the database excluding sensitive information.
     */
    LinkedCalendarView: {
      /** Id */
      id: number;
      /** User Id */
      user_id: number;
      /** Alias */
      alias: string;
      /** Url */
      url: string;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Color */
      color?: string | null;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
    };
    /**
     * ListEventGroupsResponse
     * @description Represents a list of event groups.
     */
    ListEventGroupsResponse: {
      /** Event Groups */
      event_groups: components["schemas"]["ViewEventGroup"][];
    };
    /** ListTagsResponse */
    ListTagsResponse: {
      /** Tags */
      tags: components["schemas"]["ViewTag"][];
    };
    /**
     * UpdateEventGroup
     * @description Represents a group instance to be updated.
     */
    UpdateEventGroup: {
      /** Alias */
      alias?: string | null;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Path */
      path?: string | null;
    };
    /** UserPredefinedGroupsResponse */
    UserPredefinedGroupsResponse: {
      /** Event Groups */
      event_groups: number[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /**
     * ViewEventGroup
     * @description Represents a group instance from the database excluding sensitive information.
     */
    ViewEventGroup: {
      /** Id */
      id: number;
      /** Alias */
      alias: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Path */
      path?: string | null;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Tags */
      tags?: components["schemas"]["ViewTag"][];
    };
    /** ViewTag */
    ViewTag: {
      /** Id */
      id: number;
      /** Alias */
      alias: string;
      /** Type */
      type?: string | null;
      /** Name */
      name?: string | null;
      /** Satellite */
      satellite?: Record<string, never> | null;
    };
    /**
     * ViewUser
     * @description Represents a user instance from the database excluding sensitive information.
     */
    ViewUser: {
      /** Id */
      id: number;
      /** Email */
      email: string;
      /** Innohassle Id */
      innohassle_id?: string | null;
      /** Name */
      name?: string | null;
      /** Favorite Event Groups */
      favorite_event_groups?: number[];
      /** Hidden Event Groups */
      hidden_event_groups?: number[];
      /** Linked Calendars */
      linked_calendars?: {
        [key: string]: components["schemas"]["LinkedCalendarView"];
      };
      /** Music Room Hidden */
      music_room_hidden: boolean;
      /** Sports Hidden */
      sports_hidden: boolean;
      /** Moodle Hidden */
      moodle_hidden: boolean;
      /** Moodle Userid */
      moodle_userid?: number | null;
      /** Moodle Calendar Authtoken */
      moodle_calendar_authtoken?: string | null;
    };
    /**
     * ViewUserScheduleKey
     * @description Represents a user schedule key.
     */
    ViewUserScheduleKey: {
      /** User Id */
      user_id: number;
      /** Access Key */
      access_key: string;
      /** Resource Path */
      resource_path: string;
    };
    /** Workshop */
    Workshop: {
      /** Subject */
      subject: string;
      /** When */
      when: string;
      /**
       * Instructor
       * @default
       */
      instructor: string;
      /**
       * Location
       * @default
       */
      location: string;
      /**
       * Limit
       * @default
       */
      limit: string;
      /**
       * Checkin
       * @default
       */
      checkin: string;
    };
    /** _GetScheduleAccessKeyResponse */
    _GetScheduleAccessKeyResponse: {
      /** New */
      new: boolean;
      access_key: components["schemas"]["ViewUserScheduleKey"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaAcademicGroup = components["schemas"]["AcademicGroup"];
export type SchemaBodyEventGroupsBatchCreateEventGroups =
  components["schemas"]["Body_event_groups_batch_create_event_groups"];
export type SchemaBodyEventGroupsSetEventGroupIcs =
  components["schemas"]["Body_event_groups_set_event_group_ics"];
export type SchemaBodyTagsBatchCreateTags =
  components["schemas"]["Body_tags_batch_create_tags"];
export type SchemaBootcampParserConfig =
  components["schemas"]["BootcampParserConfig"];
export type SchemaBuddyGroup = components["schemas"]["BuddyGroup"];
export type SchemaCleaningEntry = components["schemas"]["CleaningEntry"];
export type SchemaCleaningParserConfig =
  components["schemas"]["CleaningParserConfig"];
export type SchemaCreateEventGroup = components["schemas"]["CreateEventGroup"];
export type SchemaCreateTag = components["schemas"]["CreateTag"];
export type SchemaEntry = components["schemas"]["Entry"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaInJsonUser = components["schemas"]["InJsonUser"];
export type SchemaJsonPredefinedUsers =
  components["schemas"]["JsonPredefinedUsers"];
export type SchemaLinenChangeEntry = components["schemas"]["LinenChangeEntry"];
export type SchemaLinkedCalendarCreate =
  components["schemas"]["LinkedCalendarCreate"];
export type SchemaLinkedCalendarView =
  components["schemas"]["LinkedCalendarView"];
export type SchemaListEventGroupsResponse =
  components["schemas"]["ListEventGroupsResponse"];
export type SchemaListTagsResponse = components["schemas"]["ListTagsResponse"];
export type SchemaUpdateEventGroup = components["schemas"]["UpdateEventGroup"];
export type SchemaUserPredefinedGroupsResponse =
  components["schemas"]["UserPredefinedGroupsResponse"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type SchemaViewEventGroup = components["schemas"]["ViewEventGroup"];
export type SchemaViewTag = components["schemas"]["ViewTag"];
export type SchemaViewUser = components["schemas"]["ViewUser"];
export type SchemaViewUserScheduleKey =
  components["schemas"]["ViewUserScheduleKey"];
export type SchemaWorkshop = components["schemas"]["Workshop"];
export type SchemaGetScheduleAccessKeyResponse =
  components["schemas"]["_GetScheduleAccessKeyResponse"];
export type $defs = Record<string, never>;
export interface operations {
  event_groups_list_event_groups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of event groups */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListEventGroupsResponse"];
        };
      };
    };
  };
  event_groups_create_event_group: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEventGroup"];
      };
    };
    responses: {
      /** @description Event group created successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewEventGroup"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Integrity error, unique constraint violation. Return existing event group */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_batch_create_event_groups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_event_groups_batch_create_event_groups"];
      };
    };
    responses: {
      /** @description List of created or existing event groups */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListEventGroupsResponse"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_get_event_group: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        event_group_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Event group info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewEventGroup"];
        };
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_update_event_group: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        event_group_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEventGroup"];
      };
    };
    responses: {
      /** @description Event group updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewEventGroup"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_find_event_group_by_path: {
    parameters: {
      query: {
        path: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Event group info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewEventGroup"];
        };
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_find_event_group_by_alias: {
    parameters: {
      query: {
        alias: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Event group info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewEventGroup"];
        };
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_delete_event_group_by_alias: {
    parameters: {
      query: {
        alias: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Event group deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_delete_event_group_by_tag_alias: {
    parameters: {
      query: {
        tag_alias: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Event groups deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  event_groups_set_event_group_ics: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        event_group_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_event_groups_set_event_group_ics"];
      };
    };
    responses: {
      /** @description .ics file is not modified */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description .ics file updated successfully */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Path is not defined for this event group */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_current_user_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule based on favorites (non-hidden) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
    };
  };
  ics_get_user_schedule: {
    parameters: {
      query: {
        access_key: string;
      };
      header?: never;
      path: {
        user_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule based on favorites (non-hidden) */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_music_room_current_user_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule of the music room booking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
    };
  };
  ics_get_music_room_user_schedule: {
    parameters: {
      query: {
        access_key: string;
      };
      header?: never;
      path: {
        user_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule of the music room booking */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_sport_current_user_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with your sport check-ins */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
    };
  };
  ics_get_sport_user_schedule: {
    parameters: {
      query: {
        access_key: string;
      };
      header?: never;
      path: {
        user_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with your sport check-ins */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_moodle_user_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with your schedule from moodle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ics_get_moodle_current_user_schedule: {
    parameters: {
      query: {
        access_key: string;
      };
      header?: never;
      path: {
        user_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with your schedule from moodle */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Access denied, not enough permissions */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_user_linked_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: number;
        linked_alias: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule based on linked url */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
          "text/calendar": string;
        };
      };
      /** @description Object not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  ics_get_music_room_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule of the music room */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/calendar": string;
        };
      };
    };
  };
  ics_get_event_group_ics_by_alias: {
    parameters: {
      query: {
        user_id: number;
        export_type: string;
      };
      header?: {
        "user-agent"?: string | null;
      };
      path: {
        event_group_alias: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description ICS file with schedule of the event-group */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/calendar": string;
        };
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  parse_parse_cleaning_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CleaningParserConfig"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  parse_parse_bootcamp_schedule: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BootcampParserConfig"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  predefined_get_predefined_data: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Predefined data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JsonPredefinedUsers"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  predefined_update_predefined_data: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JsonPredefinedUsers"];
      };
    };
    responses: {
      /** @description Predefined data updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tags_list_tags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of event groups */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListTagsResponse"];
        };
      };
    };
  };
  tags_batch_create_tags: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Body_tags_batch_create_tags"];
      };
    };
    responses: {
      /** @description List of created or existing tags */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ListTagsResponse"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tags_delete_tag: {
    parameters: {
      query: {
        tag_alias: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tag deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  tags_delete_tag_by_type: {
    parameters: {
      query: {
        tag_type: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Tag deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_get_me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_get_predefined: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Predefined event groups for user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserPredefinedGroupsResponse"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_add_favorite: {
    parameters: {
      query: {
        group_id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Favorite added successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Event group not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_delete_favorite: {
    parameters: {
      query: {
        group_id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Favorite deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_hide_favorite: {
    parameters: {
      query: {
        group_id: number;
        hide?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Favorite hidden */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_hide_target: {
    parameters: {
      query?: {
        hide?: boolean;
      };
      header?: never;
      path: {
        target: PathsUsersMeTargetHidePostParametersPathTarget;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Target hidden */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUser"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_link_calendar: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkedCalendarCreate"];
      };
    };
    responses: {
      /** @description Linked calendar added successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LinkedCalendarView"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_generate_user_schedule_key: {
    parameters: {
      query: {
        resource_path: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Schedule access key for given resource */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["_GetScheduleAccessKeyResponse"];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_get_user_schedule_keys: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Schedule access keys for user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUserScheduleKey"][];
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  users_delete_user_schedule_key: {
    parameters: {
      query: {
        access_key: string;
        resource_path: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Schedule access key deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  users_set_user_moodle_data: {
    parameters: {
      query: {
        moodle_userid: number;
        moodle_calendar_authtoken: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Moodle stuff is configured successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unable to verify credentials OR Credentials not provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  metrics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
export enum PathsUsersMeTargetHidePostParametersPathTarget {
  music_room = "music-room",
  sports = "sports",
  moodle = "moodle",
}
