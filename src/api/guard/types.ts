/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/google/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health Check
     * @description Health check endpoint to verify service is running.
     */
    get: operations["health_check_google_health_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/service-account-email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Service Account Email
     * @description Get the service account email address.
     */
    get: operations["get_service_account_email_google_service_account_email_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Files
     * @description Get all files for the user (brief info without joins and banned).
     */
    get: operations["get_files_google_files_get"];
    put?: never;
    /**
     * Create File
     * @description Create a new Google file (spreadsheet or document) and return join link.
     */
    post: operations["create_file_google_files_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files/copy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Copy File
     * @description Copy an existing Google file to service account's drive and add it to the system.
     */
    post: operations["copy_file_google_files_copy_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files/{slug}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get File
     * @description Get full file information including joins and banned users.
     */
    get: operations["get_file_google_files__slug__get"];
    put?: never;
    post?: never;
    /**
     * Delete File
     * @description Delete a file by slug (author only).
     */
    delete: operations["delete_file_google_files__slug__delete"];
    options?: never;
    head?: never;
    /**
     * Update File
     * @description Update file title (author only).
     */
    patch: operations["update_file_google_files__slug__patch"];
    trace?: never;
  };
  "/google/files/{slug}/joins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Join File
     * @description Add user to the file with specified role.
     */
    post: operations["join_file_google_files__slug__joins_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files/{slug}/bans": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Ban User
     * @description Ban user from the file.
     */
    post: operations["ban_user_google_files__slug__bans_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files/{slug}/bans/{user_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Unban User
     * @description Unban user by user_id (author only).
     */
    delete: operations["unban_user_google_files__slug__bans__user_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/files/{slug}/cleanup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Cleanup File Permissions
     * @description Remove any user permissions that are not present in sso_joins.
     */
    post: operations["cleanup_file_permissions_google_files__slug__cleanup_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** BanUserRequest */
    BanUserRequest: {
      user_id: components["schemas"]["PydanticObjectId"];
    };
    /** BanUserResponse */
    BanUserResponse: {
      /** Message */
      message: string;
    };
    /** CleanupResponse */
    CleanupResponse: {
      /** Removed */
      removed: number;
    };
    /** CopyFileRequest */
    CopyFileRequest: {
      /** File Id */
      file_id: string;
      /**
       * User Role
       * @enum {string}
       */
      user_role: CopyFileRequestUser_role;
    };
    /** CopyFileResponse */
    CopyFileResponse: {
      /** File Id */
      file_id: string;
      /**
       * File Type
       * @enum {string}
       */
      file_type: CopyFileResponseFile_type;
      /** Title */
      title: string;
      /**
       * User Role
       * @enum {string}
       */
      user_role: CopyFileResponseUser_role;
      /** Join Link */
      join_link: string;
    };
    /** CreateFileRequest */
    CreateFileRequest: {
      /**
       * File Type
       * @enum {string}
       */
      file_type: CreateFileRequestFile_type;
      /** Title */
      title: string;
      /**
       * User Role
       * @enum {string}
       */
      user_role: CreateFileRequestUser_role;
    };
    /** CreateFileResponse */
    CreateFileResponse: {
      /** File Id */
      file_id: string;
      /**
       * File Type
       * @enum {string}
       */
      file_type: CreateFileResponseFile_type;
      /** Title */
      title: string;
      /**
       * User Role
       * @enum {string}
       */
      user_role: CreateFileResponseUser_role;
      /** Join Link */
      join_link: string;
    };
    /** DeleteFileResponse */
    DeleteFileResponse: {
      /** Message */
      message: string;
    };
    /** GoogleFile */
    GoogleFile: {
      author_id: components["schemas"]["PydanticObjectId"];
      /**
       * User Role
       * @enum {string}
       */
      user_role: GoogleFileUser_role;
      /** Slug */
      slug: string;
      /** File Id */
      file_id: string;
      /**
       * File Type
       * @enum {string}
       */
      file_type: GoogleFileFile_type;
      /** Title */
      title: string;
      /** Expire At */
      expire_at?: string | null;
      /** Sso Joins */
      sso_joins?: components["schemas"]["GoogleFileSSOJoinInfo"][] | null;
      /** Sso Joins Count */
      sso_joins_count: number;
      /** Sso Banned */
      sso_banned?: components["schemas"]["GoogleFileSSOBanInfo"][] | null;
      /** Sso Banned Count */
      sso_banned_count: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
    };
    /** GoogleFileSSOBanInfo */
    GoogleFileSSOBanInfo: {
      user_id: components["schemas"]["PydanticObjectId"];
      /** Gmail */
      gmail: string;
      /** Innomail */
      innomail: string;
      /**
       * Banned At
       * Format: date-time
       */
      banned_at: string;
    };
    /** GoogleFileSSOJoinInfo */
    GoogleFileSSOJoinInfo: {
      user_id: components["schemas"]["PydanticObjectId"];
      /** Gmail */
      gmail: string;
      /** Innomail */
      innomail: string;
      /**
       * Joined At
       * Format: date-time
       */
      joined_at: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** HealthCheckResponse */
    HealthCheckResponse: {
      /** Status */
      status: string;
      /** Service */
      service: string;
    };
    /** JoinFileRequest */
    JoinFileRequest: {
      /** Gmail */
      gmail: string;
    };
    /** JoinFileResponse */
    JoinFileResponse: {
      /** Message */
      message: string;
      /** File Id */
      file_id: string;
    };
    /** @example 5eb7cf5a86d9755df3a6c593 */
    PydanticObjectId: string;
    /** ServiceAccountEmailResponse */
    ServiceAccountEmailResponse: {
      /** Email */
      email: string;
    };
    /** UnbanUserResponse */
    UnbanUserResponse: {
      /** Message */
      message: string;
    };
    /** UpdateFileRequest */
    UpdateFileRequest: {
      /** Title */
      title: string;
    };
    /** UpdateFileResponse */
    UpdateFileResponse: {
      /** File Id */
      file_id: string;
      /** Title */
      title: string;
      /** Message */
      message: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaBanUserRequest = components["schemas"]["BanUserRequest"];
export type SchemaBanUserResponse = components["schemas"]["BanUserResponse"];
export type SchemaCleanupResponse = components["schemas"]["CleanupResponse"];
export type SchemaCopyFileRequest = components["schemas"]["CopyFileRequest"];
export type SchemaCopyFileResponse = components["schemas"]["CopyFileResponse"];
export type SchemaCreateFileRequest =
  components["schemas"]["CreateFileRequest"];
export type SchemaCreateFileResponse =
  components["schemas"]["CreateFileResponse"];
export type SchemaDeleteFileResponse =
  components["schemas"]["DeleteFileResponse"];
export type SchemaGoogleFile = components["schemas"]["GoogleFile"];
export type SchemaGoogleFileSsoBanInfo =
  components["schemas"]["GoogleFileSSOBanInfo"];
export type SchemaGoogleFileSsoJoinInfo =
  components["schemas"]["GoogleFileSSOJoinInfo"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaHealthCheckResponse =
  components["schemas"]["HealthCheckResponse"];
export type SchemaJoinFileRequest = components["schemas"]["JoinFileRequest"];
export type SchemaJoinFileResponse = components["schemas"]["JoinFileResponse"];
export type SchemaPydanticObjectId = components["schemas"]["PydanticObjectId"];
export type SchemaServiceAccountEmailResponse =
  components["schemas"]["ServiceAccountEmailResponse"];
export type SchemaUnbanUserResponse =
  components["schemas"]["UnbanUserResponse"];
export type SchemaUpdateFileRequest =
  components["schemas"]["UpdateFileRequest"];
export type SchemaUpdateFileResponse =
  components["schemas"]["UpdateFileResponse"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type $defs = Record<string, never>;
export interface operations {
  health_check_google_health_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HealthCheckResponse"];
        };
      };
    };
  };
  get_service_account_email_google_service_account_email_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ServiceAccountEmailResponse"];
        };
      };
      /** @description Service account not configured: {e} */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_files_google_files_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GoogleFile"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_file_google_files_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateFileResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  copy_file_google_files_copy_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CopyFileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CopyFileResponse"];
        };
      };
      /** @description Unsupported mimeType: {mime_type} */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_file_google_files__slug__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GoogleFile"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  delete_file_google_files__slug__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteFileResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  update_file_google_files__slug__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateFileResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  join_file_google_files__slug__joins_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JoinFileRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JoinFileResponse"];
        };
      };
      /** @description Gmail {e.gmail} does not exist or is not associated with a Google account */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  ban_user_google_files__slug__bans_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BanUserRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BanUserResponse"];
        };
      };
      /** @description User with user_id {request.user_id} not found in joins */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  unban_user_google_files__slug__bans__user_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnbanUserResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  cleanup_file_permissions_google_files__slug__cleanup_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CleanupResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
export enum CopyFileRequestUser_role {
  writer = "writer",
  reader = "reader",
}
export enum CopyFileResponseFile_type {
  spreadsheet = "spreadsheet",
  document = "document",
}
export enum CopyFileResponseUser_role {
  writer = "writer",
  reader = "reader",
}
export enum CreateFileRequestFile_type {
  spreadsheet = "spreadsheet",
  document = "document",
}
export enum CreateFileRequestUser_role {
  writer = "writer",
  reader = "reader",
}
export enum CreateFileResponseFile_type {
  spreadsheet = "spreadsheet",
  document = "document",
}
export enum CreateFileResponseUser_role {
  writer = "writer",
  reader = "reader",
}
export enum GoogleFileUser_role {
  writer = "writer",
  reader = "reader",
}
export enum GoogleFileFile_type {
  spreadsheet = "spreadsheet",
  document = "document",
}
