/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/google/service-account-email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Service Account Email
     * @description Get the service account email address.
     */
    get: operations["get_service_account_email_google_service_account_email_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/documents": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Documents
     * @description Get all documents for the user (brief info without joins and banned).
     */
    get: operations["get_documents_google_documents_get"];
    put?: never;
    /**
     * Setup Spreadsheet
     * @description Setup InNoHassle Guard sheet with description and return join link.
     */
    post: operations["setup_spreadsheet_google_documents_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/documents/{slug}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Document
     * @description Get full document information including joins and banned users.
     */
    get: operations["get_document_google_documents__slug__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/google/documents/{slug}/joins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Join Document
     * @description Add user to the spreadsheet with specified role.
     */
    post: operations["join_document_google_documents__slug__joins_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** GoogleLink */
    GoogleLink: {
      /**
       * Author Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      author_id: string;
      /**
       * User Role
       * @enum {string}
       */
      user_role: GoogleLinkUser_role;
      /** Slug */
      slug: string;
      /** Spreadsheet Id */
      spreadsheet_id: string;
      /** Expire At */
      expire_at?: string | null;
      /** Joins */
      joins: components["schemas"]["GoogleLinkJoinInfo"][];
      /** Banned */
      banned: string[];
    };
    /** GoogleLinkJoinInfo */
    GoogleLinkJoinInfo: {
      /**
       * User Id
       * @example 5eb7cf5a86d9755df3a6c593
       */
      user_id: string;
      /** Gmail */
      gmail: string;
      /** Innomail */
      innomail: string;
      /**
       * Joined At
       * Format: date-time
       */
      joined_at: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** JoinDocumentRequest */
    JoinDocumentRequest: {
      /** Gmail */
      gmail: string;
    };
    /** JoinDocumentResponse */
    JoinDocumentResponse: {
      /** Message */
      message: string;
      /** Spreadsheet Id */
      spreadsheet_id: string;
    };
    /** ServiceAccountEmailResponse */
    ServiceAccountEmailResponse: {
      /** Email */
      email: string;
    };
    /** SetupSpreadsheetRequest */
    SetupSpreadsheetRequest: {
      /** Spreadsheet Id */
      spreadsheet_id: string;
      /**
       * Respondent Role
       * @enum {string}
       */
      respondent_role: SetupSpreadsheetRequestRespondent_role;
    };
    /** SetupSpreadsheetResponse */
    SetupSpreadsheetResponse: {
      /** Sheet Title */
      sheet_title: string;
      /** Spreadsheet Id */
      spreadsheet_id: string;
      /** Role Display */
      role_display: string;
      /** Join Link */
      join_link: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaGoogleLink = components["schemas"]["GoogleLink"];
export type SchemaGoogleLinkJoinInfo =
  components["schemas"]["GoogleLinkJoinInfo"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaJoinDocumentRequest =
  components["schemas"]["JoinDocumentRequest"];
export type SchemaJoinDocumentResponse =
  components["schemas"]["JoinDocumentResponse"];
export type SchemaServiceAccountEmailResponse =
  components["schemas"]["ServiceAccountEmailResponse"];
export type SchemaSetupSpreadsheetRequest =
  components["schemas"]["SetupSpreadsheetRequest"];
export type SchemaSetupSpreadsheetResponse =
  components["schemas"]["SetupSpreadsheetResponse"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type $defs = Record<string, never>;
export interface operations {
  get_service_account_email_google_service_account_email_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ServiceAccountEmailResponse"];
        };
      };
      /** @description Service account not configured: {e} */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_documents_google_documents_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GoogleLink"][];
        };
      };
      /** @description Invalid token OR No credentials provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  setup_spreadsheet_google_documents_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetupSpreadsheetRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SetupSpreadsheetResponse"];
        };
      };
      /** @description Invalid token OR No credentials provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Service account {service_email()} does not have access to this spreadsheet. Please add the service account as an editor to the spreadsheet first. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_document_google_documents__slug__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GoogleLink"];
        };
      };
      /** @description Invalid token OR No credentials provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description You are not the author of this document */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Document not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  join_document_google_documents__slug__joins_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["JoinDocumentRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["JoinDocumentResponse"];
        };
      };
      /** @description Invalid token OR No credentials provided */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Permission denied. Make sure the service account has access to the spreadsheet. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Spreadsheet not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
export enum GoogleLinkUser_role {
  writer = "writer",
  reader = "reader",
}
export enum SetupSpreadsheetRequestRespondent_role {
  writer = "writer",
  reader = "reader",
}
