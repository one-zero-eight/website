/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Me
     * @description Get current user info if authenticated
     */
    get: operations["get_me_users_me_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/my_checkins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get My Checkins */
    get: operations["get_my_checkins_users_my_checkins_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/change_role": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Change Role
     * @description Change role of user by email
     */
    post: operations["change_role_users_change_role_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{user_id}/checkins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get User Checkins */
    get: operations["get_user_checkins_users__user_id__checkins_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workshops/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get All Workshops */
    get: operations["get_all_workshops_workshops__get"];
    put?: never;
    /**
     * Add Workshop
     * @description Add a new workshop
     */
    post: operations["add_workshop_workshops__post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workshops/{workshop_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update Workshop */
    put: operations["update_workshop_workshops__workshop_id__put"];
    post?: never;
    /** Delete Workshop */
    delete: operations["delete_workshop_workshops__workshop_id__delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workshops/{workshop_id}/checkin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Checkin User
     * @description Check in a user to a workshop
     */
    post: operations["checkin_user_workshops__workshop_id__checkin_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workshops/{workshop_id}/checkout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Checkout User */
    post: operations["checkout_user_workshops__workshop_id__checkout_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workshops/{workshop_id}/checkins": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get All Check Ins */
    get: operations["get_all_check_ins_workshops__workshop_id__checkins_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** CreateWorkshop */
    CreateWorkshop: {
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Dtstart
       * Format: date-time
       */
      dtstart: string;
      /**
       * Dtend
       * Format: date-time
       */
      dtend: string;
      /** Place */
      place?: string | null;
      /** Capacity */
      capacity?: number | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** UpdateWorkshop */
    UpdateWorkshop: {
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
      /** Dtstart */
      dtstart?: string | null;
      /** Dtend */
      dtend?: string | null;
      /** Place */
      place?: string | null;
      /** Capacity */
      capacity?: number | null;
      /** Is Active */
      is_active?: boolean | null;
    };
    /** User */
    User: {
      /** Innohassle Id */
      innohassle_id: string;
      /** Email */
      email: string;
      /** Telegram Username */
      telegram_username: string | null;
      /** @default user */
      role: components["schemas"]["UserRole"];
    };
    /**
     * UserRole
     * @enum {string}
     */
    UserRole: UserRole;
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** ViewUserScheme */
    ViewUserScheme: {
      /** Id */
      id: string;
      /** Innohassle Id */
      innohassle_id: string;
      role: components["schemas"]["UserRole"];
      /** Email */
      email: string;
      /** Telegram Username */
      telegram_username?: string | null;
      /** Name */
      name?: string | null;
    };
    /** Workshop */
    Workshop: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string | null;
      /**
       * Dtstart
       * Format: date-time
       */
      dtstart: string;
      /**
       * Dtend
       * Format: date-time
       */
      dtend: string;
      /** Place */
      place: string | null;
      /**
       * Capacity
       * @default 1000000
       */
      capacity: number;
      /**
       * Is Active
       * @default true
       */
      is_active: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Remain Places */
      readonly remain_places: number;
      /**
       * Is Registrable
       * @description Marks whether users can register to the workshop.
       *     Can be register only within 1 day before the workshop, and cannot be register after the workshop.
       */
      readonly is_registrable: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaCreateWorkshop = components["schemas"]["CreateWorkshop"];
export type SchemaHttpValidationError =
  components["schemas"]["HTTPValidationError"];
export type SchemaUpdateWorkshop = components["schemas"]["UpdateWorkshop"];
export type SchemaUser = components["schemas"]["User"];
export type SchemaUserRole = components["schemas"]["UserRole"];
export type SchemaValidationError = components["schemas"]["ValidationError"];
export type SchemaViewUserScheme = components["schemas"]["ViewUserScheme"];
export type SchemaWorkshop = components["schemas"]["Workshop"];
export type $defs = Record<string, never>;
export interface operations {
  get_me_users_me_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current user info */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
  };
  get_my_checkins_users_my_checkins_get: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User's check-ins retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Workshop"][];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  change_role_users_change_role_post: {
    parameters: {
      query: {
        role: components["schemas"]["UserRole"];
        user_to_change_email: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Changed role succesfully, returns updated user */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Only superadmin can change role */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User to change not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_user_checkins_users__user_id__checkins_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        user_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User's check-ins retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Workshop"][];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_workshops_workshops__get: {
    parameters: {
      query?: {
        limit?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description All workshops retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Workshop"][];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  add_workshop_workshops__post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWorkshop"];
      };
    };
    responses: {
      /** @description Workshop successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Workshop"];
        };
      };
      /** @description Workshop creation failed */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authorized (admin required) */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  update_workshop_workshops__workshop_id__put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workshop_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWorkshop"];
      };
    };
    responses: {
      /** @description Workshop updated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Workshop"];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authorized (admin required) */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_workshop_workshops__workshop_id__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workshop_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Workshop deleted successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authorized (admin required) */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  checkin_user_workshops__workshop_id__checkin_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workshop_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully checked in */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Some error occurred during checkin */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  checkout_user_workshops__workshop_id__checkout_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workshop_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully checked out */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Some error occurred during checkout */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_all_check_ins_workshops__workshop_id__checkins_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        workshop_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description All check-ins retrieved successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ViewUserScheme"][];
        };
      };
      /** @description Not authenticated */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Workshop not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
export enum UserRole {
  admin = "admin",
  user = "user",
}
