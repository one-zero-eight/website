/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/analytics/attendance": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["analytics_attendance_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{group_id}/report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_report_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{student_id}/better_than": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_better_than_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{student_id}/hours": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_hours_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{student_id}/negative_hours": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_negative_hours_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{training_id}/grades": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_grades_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/{training_id}/grades.csv": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_grades.csv_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/mark": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["attendance_mark_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/attendance/suggest_student": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["attendance_suggest_student_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/calendar/{sport_id}/schedule": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["calendar_schedule_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/calendar/trainings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["calendar_trainings_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollment/enroll": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Enroll student
     *
     *     error codes:
     *     2 - Group you chosen is full
     *     3 - You have too much secondary groups
     *     4 - You can't enroll to a group you have already enrolled to
     *     6 - Enroll with insufficient medical group */
    post: operations["enrollment_enroll_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollment/unenroll": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Unenroll student
     *
     *     Error codes:
     *     5 - Can't unenroll from primary group */
    post: operations["enrollment_unenroll_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enrollment/unenroll_by_trainer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Unenroll student
     *
     *     Error codes:
     *     5 - Can't unenroll from primary group */
    post: operations["enrollment_unenroll_by_trainer_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/exercises": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all exercises by `semester_id`. If `semester_id` is not set, returns current semester exercises. */
    get: operations["fitnesstest_exercises_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/result": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["fitnesstest_result_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/sessions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get all sessions by `semester_id`. If `semester_id` is not set, returns all sessions. */
    get: operations["fitnesstest_sessions_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/sessions/{session_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["fitnesstest_sessions_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/suggest_student": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["fitnesstest_suggest_student_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["fitnesstest_upload_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/fitnesstest/upload/{session_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["fitnesstest_upload_create_2"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/group/{group_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["group_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/measurement/get_measurements": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["measurement_get_measurements_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/measurement/get_results": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["measurement_get_results_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/measurement/student_measurement": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["measurement_student_measurement_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/medical_groups/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["medical_groups_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/QR/toggle": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description Toggles has_QR status */
    post: operations["profile_QR_toggle_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/change_gender": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["profile_change_gender_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/history/{semester_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get student's trainings per_semester */
    get: operations["profile_history_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/history/by_date": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["profile_history_by_date_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/history_with_self/{semester_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get student's trainings per_semester */
    get: operations["profile_history_with_self_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/student": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get info about current student. */
    get: operations["profile_student_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/reference/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["reference_upload_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/select_sport": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["select_sport_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/selfsport/strava_parsing": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Strava link parsing */
    get: operations["selfsport_strava_parsing_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/selfsport/types": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["selfsport_types_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/selfsport/upload": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description One link to Strava required (begins with http(s)://) */
    post: operations["selfsport_upload_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/semester": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Get semesters. */
    get: operations["semester_list"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/sports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["sports_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/training/{training_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["training_retrieve"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/training/{training_id}/cancel_check_in": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["training_cancel_check_in_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/training/{training_id}/check_in": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["training_check_in_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Attendance: {
      hours: number;
      training_id: number;
      /** Format: date */
      date: string;
      training_class: string;
      group_id: number;
      group_name: string;
      trainers_emails: unknown[];
    };
    AttendanceMarkRequest: {
      training_id: number;
      students_hours: components["schemas"]["GradeSetRequest"][];
    };
    BadGradeReport: {
      code: number;
      description: string;
      negative_marks?: components["schemas"]["BadGradeReportGrade"][];
      overflow_marks?: components["schemas"]["BadGradeReportGrade"][];
    };
    BadGradeReportGrade: {
      /** Format: email */
      email: string;
      hours: number;
    };
    BetterThanInfo: {
      /** Format: double */
      better_than: number;
    };
    Calendar: {
      title: string;
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
      extendedProps: components["schemas"]["ScheduleExtendedProps"];
    };
    EnrollRequest: {
      group_id: number;
    };
    Error: {
      code: number;
      detail: string;
    };
    FitnessTestDetail: {
      exercise: string;
      unit: string | null;
      value: number | string;
      score: number;
      max_score: number;
    };
    FitnessTestExercise: {
      readonly id: number;
      semester: components["schemas"]["Semester"];
      name: string;
      unit: string;
      select: string[];
    };
    FitnessTestResult: {
      student: components["schemas"]["Student"];
      value?: number | null;
    };
    FitnessTestSession: {
      readonly id: number;
      semester: components["schemas"]["Semester"];
      retake: boolean;
      /** Format: date-time */
      date: string;
      teacher: string;
    };
    FitnessTestSessionWithResult: {
      session: components["schemas"]["FitnessTestSession"];
      exercises: components["schemas"]["FitnessTestExercise"][];
      results: {
        [key: string]: components["schemas"]["FitnessTestResult"][];
      };
    };
    FitnessTestStudentResult: {
      semester: string;
      retake: boolean;
      grade: boolean;
      total_score: number;
      details: components["schemas"]["FitnessTestDetail"][];
    };
    FitnessTestUpdateEntryRequest: {
      student_id: number;
      exercise_id: number;
      value: string;
    };
    FitnessTestUploadRequest: {
      semester_id: number;
      retake: boolean;
      results: components["schemas"]["FitnessTestUpdateEntryRequest"][];
    };
    GenderRequest: {
      student_id: number;
      gender: number;
    };
    GradeReport: {
      student_id: number;
      first_name: string;
      last_name: string;
      full_name: string;
      /** Format: email */
      email: string;
      hours?: number;
    };
    GradeSetRequest: {
      student_id: number;
      hours: number;
    };
    GroupInfo: {
      group_id: number;
      group_name: string;
      capacity: number;
      current_load: number;
      trainer_first_name: string;
      trainer_last_name: string;
      trainer_email: string;
      trainers: components["schemas"]["Trainer"][];
      is_enrolled: boolean;
      can_enroll: boolean;
      schedule: components["schemas"]["Schedule"][];
    };
    HasQR: {
      has_QR: boolean;
    };
    HourInfoSemesterChild: {
      id_sem: number;
      hours_not_self: number;
      hours_self_not_debt: number;
      hours_self_debt: number;
      hours_sem_max: number;
      debt: number;
    };
    HoursInfo: {
      last_semesters_hours: components["schemas"]["HourInfoSemesterChild"][];
      ongoing_semester: components["schemas"]["HourInfoSemesterChild"];
    };
    HoursInfoFull: {
      final_hours: number;
    };
    InbuiltError: {
      readonly detail: string;
    };
    LastAttendedDates: {
      last_attended_dates: components["schemas"]["LastAttendedStat"][];
    };
    LastAttendedStat: {
      student_id: number;
      first_name: string;
      last_name: string;
      full_name: string;
      /** Format: email */
      email: string;
      last_attended: string;
    };
    MeasurementPostRequest: {
      student_id: number;
      measurement_id: number;
      value: number;
    };
    MeasurementResult: {
      measurement: string;
      uint: string;
      value: number;
      approved: boolean;
      /** Format: date */
      date: string;
    };
    MeasurementResults: {
      semester: string;
      result: components["schemas"]["MeasurementResult"][];
    };
    MedicalGroup: {
      id: number;
      name: string;
      description: string;
    };
    MedicalGroups: {
      medical_groups: components["schemas"]["MedicalGroup"][];
    };
    NewGroup: {
      readonly id: number;
      name: string;
      capacity?: number;
      is_club?: boolean;
      sport: components["schemas"]["NewSport"];
      semester: components["schemas"]["Semester"];
      teachers: components["schemas"]["NewTrainer"][];
      accredited: boolean;
    };
    NewSport: {
      readonly id: number;
      name: string;
      description?: string;
    };
    NewTrainer: {
      id: number;
      first_name: string;
      last_name: string;
      email: string;
    };
    NewTrainingInfo: {
      readonly id: number;
      custom_name?: string | null;
      group: components["schemas"]["NewGroup"];
      /** Format: date-time */
      start: string;
      /** Format: date-time */
      end: string;
      readonly load: number;
      place: string;
    };
    NewTrainingInfoStudent: {
      training: components["schemas"]["NewTrainingInfo"];
      can_check_in: boolean;
      checked_in: boolean;
      hours?: number | null;
    };
    NotFound: {
      /** @default Not found */
      readonly detail: string;
    };
    ParsedStrava: {
      training_type: string;
      pace?: string;
      speed?: string;
      distance_km: number;
      hours: number;
      approved: boolean;
    };
    PostStudentExerciseResult: {
      /** @default ok */
      result: string;
      session_id: number;
    };
    ReferenceUploadRequest: {
      /** Format: binary */
      image: string;
      /** Format: date */
      start: string;
      /** Format: date */
      end: string;
      student_comment?: string | null;
    };
    Schedule: {
      weekday: components["schemas"]["WeekdayEnum"];
      /** Format: time */
      start: string;
      /** Format: time */
      end: string;
      training_class?: number | null;
    };
    ScheduleExtendedProps: {
      id: number;
      group_id: number;
      training_class: string;
      current_load: number;
      capacity: number;
    };
    SelfSportReportUploadRequest: {
      /** Format: uri */
      link: string;
      hours: number;
      training_type: number;
      student_comment?: string;
      parsed_data?: unknown;
    };
    SelfSportTypes: {
      /** ID */
      readonly pk: number;
      name: string;
      application_rule: string;
    };
    Semester: {
      readonly id: number;
      name: string;
      /** Format: date */
      start?: string;
      /** Format: date */
      end?: string;
    };
    Sport: {
      id: number;
      name: string;
      special: boolean;
    };
    SportEnrollRequest: {
      sport_id: number;
    };
    Sports: {
      sports: components["schemas"]["Sport"][];
    };
    Student: {
      id: string;
      name: string;
      /** Format: email */
      email: string;
      medical_group: string;
    };
    Suggestion: {
      value: string;
      label: string;
    };
    Trainer: {
      trainer_first_name: string;
      trainer_last_name: string;
      trainer_email: string;
    };
    TrainingGrades: {
      group_name: string;
      /** Format: date-time */
      start: string;
      grades: components["schemas"]["GradeReport"][];
      academic_duration: number;
    };
    TrainingHour: {
      group: string;
      /** Format: date-time */
      timestamp: string;
      hours: number;
    };
    UnenrollStudentRequest: {
      group_id: number;
      student_id: number;
    };
    /**
     * @description * `0` - Monday
     *     * `1` - Tuesday
     *     * `2` - Wednesday
     *     * `3` - Thursday
     *     * `4` - Friday
     *     * `5` - Saturday
     *     * `6` - Sunday
     * @enum {integer}
     */
    WeekdayEnum: WeekdayEnum;
    training_history404: {
      /** @default 404 */
      readonly code: string;
      /** @default Not found */
      readonly detail: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaAttendance = components["schemas"]["Attendance"];
export type SchemaAttendanceMarkRequest =
  components["schemas"]["AttendanceMarkRequest"];
export type SchemaBadGradeReport = components["schemas"]["BadGradeReport"];
export type SchemaBadGradeReportGrade =
  components["schemas"]["BadGradeReportGrade"];
export type SchemaBetterThanInfo = components["schemas"]["BetterThanInfo"];
export type SchemaCalendar = components["schemas"]["Calendar"];
export type SchemaEnrollRequest = components["schemas"]["EnrollRequest"];
export type SchemaError = components["schemas"]["Error"];
export type SchemaFitnessTestDetail =
  components["schemas"]["FitnessTestDetail"];
export type SchemaFitnessTestExercise =
  components["schemas"]["FitnessTestExercise"];
export type SchemaFitnessTestResult =
  components["schemas"]["FitnessTestResult"];
export type SchemaFitnessTestSession =
  components["schemas"]["FitnessTestSession"];
export type SchemaFitnessTestSessionWithResult =
  components["schemas"]["FitnessTestSessionWithResult"];
export type SchemaFitnessTestStudentResult =
  components["schemas"]["FitnessTestStudentResult"];
export type SchemaFitnessTestUpdateEntryRequest =
  components["schemas"]["FitnessTestUpdateEntryRequest"];
export type SchemaFitnessTestUploadRequest =
  components["schemas"]["FitnessTestUploadRequest"];
export type SchemaGenderRequest = components["schemas"]["GenderRequest"];
export type SchemaGradeReport = components["schemas"]["GradeReport"];
export type SchemaGradeSetRequest = components["schemas"]["GradeSetRequest"];
export type SchemaGroupInfo = components["schemas"]["GroupInfo"];
export type SchemaHasQr = components["schemas"]["HasQR"];
export type SchemaHourInfoSemesterChild =
  components["schemas"]["HourInfoSemesterChild"];
export type SchemaHoursInfo = components["schemas"]["HoursInfo"];
export type SchemaHoursInfoFull = components["schemas"]["HoursInfoFull"];
export type SchemaInbuiltError = components["schemas"]["InbuiltError"];
export type SchemaLastAttendedDates =
  components["schemas"]["LastAttendedDates"];
export type SchemaLastAttendedStat = components["schemas"]["LastAttendedStat"];
export type SchemaMeasurementPostRequest =
  components["schemas"]["MeasurementPostRequest"];
export type SchemaMeasurementResult =
  components["schemas"]["MeasurementResult"];
export type SchemaMeasurementResults =
  components["schemas"]["MeasurementResults"];
export type SchemaMedicalGroup = components["schemas"]["MedicalGroup"];
export type SchemaMedicalGroups = components["schemas"]["MedicalGroups"];
export type SchemaNewGroup = components["schemas"]["NewGroup"];
export type SchemaNewSport = components["schemas"]["NewSport"];
export type SchemaNewTrainer = components["schemas"]["NewTrainer"];
export type SchemaNewTrainingInfo = components["schemas"]["NewTrainingInfo"];
export type SchemaNewTrainingInfoStudent =
  components["schemas"]["NewTrainingInfoStudent"];
export type SchemaNotFound = components["schemas"]["NotFound"];
export type SchemaParsedStrava = components["schemas"]["ParsedStrava"];
export type SchemaPostStudentExerciseResult =
  components["schemas"]["PostStudentExerciseResult"];
export type SchemaReferenceUploadRequest =
  components["schemas"]["ReferenceUploadRequest"];
export type SchemaSchedule = components["schemas"]["Schedule"];
export type SchemaScheduleExtendedProps =
  components["schemas"]["ScheduleExtendedProps"];
export type SchemaSelfSportReportUploadRequest =
  components["schemas"]["SelfSportReportUploadRequest"];
export type SchemaSelfSportTypes = components["schemas"]["SelfSportTypes"];
export type SchemaSemester = components["schemas"]["Semester"];
export type SchemaSport = components["schemas"]["Sport"];
export type SchemaSportEnrollRequest =
  components["schemas"]["SportEnrollRequest"];
export type SchemaSports = components["schemas"]["Sports"];
export type SchemaStudent = components["schemas"]["Student"];
export type SchemaSuggestion = components["schemas"]["Suggestion"];
export type SchemaTrainer = components["schemas"]["Trainer"];
export type SchemaTrainingGrades = components["schemas"]["TrainingGrades"];
export type SchemaTrainingHour = components["schemas"]["TrainingHour"];
export type SchemaUnenrollStudentRequest =
  components["schemas"]["UnenrollStudentRequest"];
export type SchemaWeekdayEnum = components["schemas"]["WeekdayEnum"];
export type SchemaTrainingHistory404 =
  components["schemas"]["training_history404"];
export type $defs = Record<string, never>;
export interface operations {
  analytics_attendance_retrieve: {
    parameters: {
      query?: {
        medical_group_id?: number;
        sport_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            [key: string]: number;
          };
        };
      };
    };
  };
  attendance_report_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        group_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LastAttendedDates"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  attendance_better_than_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        student_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BetterThanInfo"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  attendance_hours_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        student_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HoursInfo"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  attendance_negative_hours_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        student_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HoursInfoFull"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  attendance_grades_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        training_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrainingGrades"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  "attendance_grades.csv_retrieve": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        training_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/csv": string;
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  attendance_mark_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AttendanceMarkRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["AttendanceMarkRequest"];
        "multipart/form-data": components["schemas"]["AttendanceMarkRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadGradeReportGrade"][];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BadGradeReport"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["InbuiltError"];
        };
      };
    };
  };
  attendance_suggest_student_list: {
    parameters: {
      query: {
        group_id: number;
        term: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Suggestion"][];
        };
      };
    };
  };
  calendar_schedule_retrieve: {
    parameters: {
      query: {
        end: string;
        start: string;
      };
      header?: never;
      path: {
        sport_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Calendar"];
        };
      };
    };
  };
  calendar_trainings_retrieve: {
    parameters: {
      query: {
        end: string;
        start: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Calendar"];
        };
      };
    };
  };
  enrollment_enroll_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnrollRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EnrollRequest"];
        "multipart/form-data": components["schemas"]["EnrollRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  enrollment_unenroll_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["EnrollRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["EnrollRequest"];
        "multipart/form-data": components["schemas"]["EnrollRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  enrollment_unenroll_by_trainer_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UnenrollStudentRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["UnenrollStudentRequest"];
        "multipart/form-data": components["schemas"]["UnenrollStudentRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  fitnesstest_exercises_list: {
    parameters: {
      query?: {
        semester_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FitnessTestExercise"][];
        };
      };
    };
  };
  fitnesstest_result_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FitnessTestStudentResult"][];
        };
      };
    };
  };
  fitnesstest_sessions_list: {
    parameters: {
      query?: {
        semester_id?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FitnessTestSession"][];
        };
      };
    };
  };
  fitnesstest_sessions_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["FitnessTestSessionWithResult"];
        };
      };
    };
  };
  fitnesstest_suggest_student_list: {
    parameters: {
      query: {
        term: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Suggestion"][];
        };
      };
    };
  };
  fitnesstest_upload_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FitnessTestUploadRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FitnessTestUploadRequest"];
        "multipart/form-data": components["schemas"]["FitnessTestUploadRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PostStudentExerciseResult"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  fitnesstest_upload_create_2: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        session_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FitnessTestUploadRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["FitnessTestUploadRequest"];
        "multipart/form-data": components["schemas"]["FitnessTestUploadRequest"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PostStudentExerciseResult"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  group_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        group_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GroupInfo"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  measurement_get_measurements_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeasurementResults"];
        };
      };
    };
  };
  measurement_get_results_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MeasurementResults"];
        };
      };
    };
  };
  measurement_student_measurement_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MeasurementPostRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["MeasurementPostRequest"];
        "multipart/form-data": components["schemas"]["MeasurementPostRequest"];
      };
    };
    responses: {
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  medical_groups_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MedicalGroups"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  profile_QR_toggle_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HasQR"];
        };
      };
    };
  };
  profile_change_gender_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenderRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["GenderRequest"];
        "multipart/form-data": components["schemas"]["GenderRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  profile_history_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        semester_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrainingHour"][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["training_history404"];
        };
      };
    };
  };
  profile_history_by_date_list: {
    parameters: {
      query: {
        /** @description date in format YYYY-MM-DD */
        date_end: string;
        /** @description date in format YYYY-MM-DD */
        date_start: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Attendance"][];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  profile_history_with_self_list: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        semester_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TrainingHour"][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["training_history404"];
        };
      };
    };
  };
  profile_student_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Student"];
        };
      };
    };
  };
  reference_upload_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["ReferenceUploadRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  select_sport_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SportEnrollRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["SportEnrollRequest"];
        "multipart/form-data": components["schemas"]["SportEnrollRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  selfsport_strava_parsing_retrieve: {
    parameters: {
      query: {
        link: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ParsedStrava"];
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      429: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  selfsport_types_list: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SelfSportTypes"][];
        };
      };
    };
  };
  selfsport_upload_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["SelfSportReportUploadRequest"];
      };
    };
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  semester_list: {
    parameters: {
      query?: {
        current?: boolean;
        with_ft_exercises?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Semester"][];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  sports_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Sports"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  training_retrieve: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        training_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NewTrainingInfoStudent"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  training_cancel_check_in_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        training_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
  training_check_in_create: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        training_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No response body */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFound"];
        };
      };
    };
  };
}
export enum WeekdayEnum {
  Value0 = 0,
  Value1 = 1,
  Value2 = 2,
  Value3 = 3,
  Value4 = 4,
  Value5 = 5,
  Value6 = 6,
}
